cmake_minimum_required(VERSION 2.8.11)

project(test_package CXX)

message(STATUS "Loading conan scripts for {0} dependencies...")
list(APPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR})
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR})
include("${CMAKE_BINARY_DIR}/conanbuildinfo.cmake")
include("${CMAKE_BINARY_DIR}/conan_paths.cmake" OPTIONAL)
message(STATUS "Doing conan basic setup")
conan_basic_setup()
#conan_basic_setup(
#    # prevent conan_basic_setup from resetting cmake variables
#    TARGETS
#    KEEP_RPATHS
#    # see https://github.com/conan-io/conan/issues/6012
#    NO_OUTPUT_DIRS)
list(APPEND CMAKE_PROGRAM_PATH ${CONAN_BIN_DIRS})
# TODO: make better: link lib dirs
link_directories(${CONAN_LIB_DIRS})
#if (APPLE OR UNIX)
#    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,${CONAN_LIB_DIRS}")
#    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-rpath,${CONAN_LIB_DIRS}")
#endif ()
#
# see https://github.com/grpc/grpc/issues/21422
#set(CMAKE_CROSSCOMPILING 1)
#set(PROTOBUF_PROTOC_LIBRARIES ${CONAN_LIBS_PROTOBUF})
#set(PROTOBUF_INCLUDE_DIRS ${CONAN_INCLUDE_DIRS_PROTOBUF})
#

find_package(FlatBuffers MODULE REQUIRED)

message(STATUS "Test Conan setup done.")
#message(STATUS "PROTOBUF_PROTOC_LIBRARIES: ${PROTOBUF_PROTOC_LIBRARIES}")
#message(STATUS "PROTOBUF_INCLUDE_DIRS: ${PROTOBUF_INCLUDE_DIRS}")
message(STATUS "CONAN_INCLUDE_DIRS_PROTOBUF: ${CONAN_INCLUDE_DIRS_PROTOBUF}")
message(STATUS "CONAN_LIBS: ${CONAN_LIBS}")
message(STATUS "FLATC_BIN: ${FLATC_BIN}")
message(STATUS "FlatBuffers_ROOT: ${FlatBuffers_ROOT}")
message(STATUS "CONAN_LIBS_FLATC_CONAN: ${CONAN_LIBS_FLATC_CONAN}")
message(STATUS "CONAN_LIBS_PROTOBUF: ${CONAN_LIBS_PROTOBUF}")
message(STATUS "CMAKE_LIBRARY_PATH: ${CMAKE_LIBRARY_PATH}")
message(STATUS "CMAKE_PROGRAM_PATH: ${CMAKE_PROGRAM_PATH}")
message(STATUS "CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}")
message(STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}")

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
include(HelperFlatBuffers)

generate_flatbuffers("strawpoll_gen"
    TARGET testme
    FILES "${CMAKE_CURRENT_SOURCE_DIR}/flatbuffers/strawpoll.fbs"
    OUTPATH "${CMAKE_CURRENT_BINARY_DIR}"
    EXTRA_ARGS "--cpp"
    DEBUG)

add_executable(testme
    ${strawpoll_gen_OUTPUTS} # generated by flatc
    main.cpp
)

MESSAGE("generate_flatbuffers result: ${strawpoll_OUTPUTS}")
